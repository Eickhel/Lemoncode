"use strict";
const mainStyle = [
    "background: #607D8B",
    "border: 1px solid #3E0E02",
    "color: white",
    "display: block",
    "text-shadow: 0 1px 0 rgba(0, 0, 0, 0.3)",
    "box-shadow: 0 1px 0 rgba(255, 255, 255, 0.4) inset, 0 5px 3px -5px rgba(0, 0, 0, 0.5), 0 -13px 5px -10px rgba(255, 255, 255, 0.4) inset",
    "line-height: 25px",
    "font-size: 1.2em",
    "font-weight: bold"
].join(";");
const exerciseStyle = ["font-size: 1.1em", "font-weight: bold"].join(";");
console.log("%c Array operations ", mainStyle);
const numbers = ["One", "Two", "Three"];
const letters = ["A", "B", "C"];
const agentSmith = {
    name: "Smith",
    role: "Agent",
    country: "The Matrix"
};
const head = ([first]) => first;
console.log("%cHead: ", exerciseStyle, head(numbers));
const tail = ([, ...args]) => args;
console.log("%cTail: ", exerciseStyle, tail(numbers));
const init = inputArray => inputArray.slice(0, inputArray.length - 1);
console.log("%cInit: ", exerciseStyle, init(numbers));
const last = inputArray => inputArray.slice(-1);
console.log("%cLast: ", exerciseStyle, last(numbers));
console.log("%c Concat ", mainStyle);
const concat = (a, b) => [...a, ...b];
console.log("%cConcat: ", exerciseStyle, concat(numbers, letters));
const concatOpt = (...args) => [].concat(...args);
console.log("%cConcat - Opt: ", exerciseStyle, concatOpt(numbers, letters, numbers, letters));
console.log("%c Clone Merge ", mainStyle);
function clone(source) {
    return Object.assign({}, source);
}
console.log("%cClone: ", exerciseStyle, clone(agentSmith));
const a = { name: "Maria", surname: "Ibañez", country: "SPA" };
const b = { name: "Luisa", age: 31, married: true };
function merge(source, target) {
    return Object.assign(target, source);
}
console.log("%cMerge: ", exerciseStyle, merge(a, b));
console.log("%c Read Books ", mainStyle);
const books = [
    { title: "Harry Potter y la piedra filosofal", isRead: true },
    { title: "Canción de hielo y fuego", isRead: false },
    { title: "Devastación", isRead: true }
];
function isBookRead(books, titleToSearch) {
    let result = books.find(function (book) {
        return book.title === titleToSearch;
    });
    return typeof result === "undefined" ? false : result.isRead;
}
console.log("%cisBookRead - Devastación: ", exerciseStyle, isBookRead(books, "Devastación"));
console.log("%cisBookRead - Canción de hielo y fuego: ", exerciseStyle, isBookRead(books, "Canción de hielo y fuego"));
console.log("%cisBookRead - Los Pilares de la Tierra: ", exerciseStyle, isBookRead(books, "Los Pilares de la Tierra"));
console.log("%c Read Books - TypeScript", mainStyle);
const booksTS = [
    { title: "Harry Potter y la piedra filosofal", isRead: true },
    { title: "Canción de hielo y fuego", isRead: false },
    { title: "Devastación", isRead: true }
];
const isBookReadTS = (books, titleToSearch) => {
    const result = books.find(element => element.title === titleToSearch);
    return typeof result === "undefined" ? false : result.isRead;
};
console.log("%cisBookRead - Devastación: ", exerciseStyle, isBookReadTS(booksTS, "Devastación"));
console.log("%cisBookRead - Canción de hielo y fuego: ", exerciseStyle, isBookReadTS(booksTS, "Canción de hielo y fuego"));
console.log("%cisBookRead - Los Pilares de la Tierra: ", exerciseStyle, isBookReadTS(booksTS, "Los Pilares de la Tierra"));
console.log("%c Slot Machine ", mainStyle);
class SlotMachine {
    constructor() {
        this.coins = 0;
    }
    spinSlot() {
        return Boolean(Math.floor(Math.random() * 2));
    }
    play() {
        this.coins++;
        if ((this.spinSlot() === this.spinSlot()) === this.spinSlot()) {
            console.log(`Congratulations!!!. You won ${this.coins} coins!!`);
            this.coins = 0;
        }
        else {
            console.log("Good luck next time!!");
        }
    }
}
const machine1 = new SlotMachine();
machine1.play();
machine1.play();
machine1.play();
machine1.play();
machine1.play();
console.log("%c Curry Setter ", mainStyle);
const set = (user, property, value) => {
    let updatedUser = Object.assign({}, user);
    updatedUser[property] = value;
    return updatedUser;
};
const julia = { name: "Julia", surname: "Álvarez", age: 19 };
const updatedJulia = set(julia, "age", 25);
console.log(updatedJulia);
console.log(julia);
console.log(julia === updatedJulia);
console.log("%c Curry Setter - Optional", mainStyle);
const curriedSet = property => (user, value) => {
    let updatedUser = Object.assign({}, user);
    updatedUser[property] = value;
    return updatedUser;
};
const setName = curriedSet("name");
const setSurname = curriedSet("surname");
const setAge = curriedSet("age");
console.log(setName(julia, "Ana"));
console.log(setSurname(julia, "González"));
console.log(setAge(julia, 25));
console.log("%c Calificaciones", mainStyle);
const students = [
    { name: "Juan", califications: [1.56, 2.13, 7.53, 9.71, 2.67, 2.43, 2.86, 9.42, 8.08, 7.34] },
    { name: "Álvaro", califications: [4.49, 1.52, 7.0, 8.3, 8.01, 6.45, 3.72, 3.27, 6.99, 6.01] },
    { name: "María", califications: [2.99, 7.33, 1.14, 3.26, 0.98, 2.94, 4.99, 4.51, 1.8, 9.3] },
    { name: "Jorge", califications: [4.6, 3.63, 9.07, 9.03, 3.05, 6.61, 4.81, 1.39, 2.97, 8.69] },
    { name: "Mónica", califications: [9.72, 6.07, 1.11, 4.72, 0.04, 1.56, 0.66, 3.87, 6.97, 9.48] }
];
const mean = list => list.reduce((total, next) => total + next) / list.length;
const summarizeClassRoom = studentList => studentList.map(({ name, califications }) => ({
    name,
    highestCalification: Math.max(...califications),
    averageCalifications: mean(califications).toPrecision(3)
}));
console.log(summarizeClassRoom(students));
console.log("%c Calificaciones - LoDash", mainStyle);
//# sourceMappingURL=data:application/json;base64,